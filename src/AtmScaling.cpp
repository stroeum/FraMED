/*
 *  AtmScaling.cpp
 *  Created by Jeremy Riousset on 10/25/07.
 */

#include "AtmScaling.h"

double Scaling::StdAtmosphere(double hh)
{
	/**********************************************************************************/
	/*							!!! Altitude in km !!!								  */
	/**********************************************************************************/
	hh*=1e-3;

	double _dh,_result;
	int _UpperBound, _LowerBound, _Median;

	/**********************************************************************************/
	/* US Standard Atmosphere:														  */
	/*	We replaced original 2.5e19cm-3 at 0 km altitude by 2.688e19 cm-3 which is our*/
	/*	reference number density at temperature 273 K.								  */
	/* This will be our altitude scaling. We prefer this to the exp(-z/8.4km) found in*/
	/* litertature, because the last one is temperature dependent.					  */
	/**********************************************************************************/

	double _Altitude[]={
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        70,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        94,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        106,
        107,
        108,
        109,
        110,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        124,
        125,
        126,
        127,
        128,
        129,
        130,
        131,
        132,
        133,
        134,
        135,
        136,
        137,
        138,
        139,
        140,
        141,
        142,
        143,
        144,
        145,
        146,
        147,
        148,
        149,
        150,
        151,
        152,
        153,
        154,
        155,
        156,
        157,
        158,
        159,
        160,
        161,
        162,
        163,
        164,
        165,
        166,
        167,
        168,
        169,
        170,
        171,
        172,
        173,
        174,
        175,
        176,
        177,
        178,
        179,
        180,
        181,
        182,
        183,
        184,
        185,
        186,
        187,
        188,
        189,
        190,
        191,
        192,
        193,
        194,
        195,
        196,
        197,
        198,
        199,
        200,
        201,
        202,
        203,
        204,
        205,
        206,
        207,
        208,
        209,
        210,
        211,
        212,
        213,
        214,
        215,
        216,
        217,
        218,
        219,
        220,
        221,
        222,
        223,
        224,
        225,
        226,
        227,
        228,
        229,
        230,
        231,
        232,
        233,
        234,
        235,
        236,
        237,
        238,
        239,
        240,
        241,
        242,
        243,
        244,
        245,
        246,
        247,
        248,
        249,
        250
    };

	double _NeutralDensity[]={
		1.88857515991232e+17,
        1.73050058705623e+17,
        1.58767882386168e+17,
        1.45595001314827e+17,
        1.33627801123687e+17,
        1.22714031978363e+17,
        1.13200443895606e+17,
        1.04451186933219e+17,
        9.63996291462614e+16,
        8.90112709476254e+16,
        8.22111294454303e+16,
        7.55098749520203e+16,
        6.93644487438034e+16,
        6.37337056236341e+16,
        5.85887385859780e+16,
        5.38537293037770e+16,
        4.92159402763309e+16,
        4.49979238116274e+16,
        4.11350251213370e+16,
        3.76091742194579e+16,
        3.43977909221027e+16,
        3.12971449798286e+16,
        2.84871845946428e+16,
        2.59402254277748e+16,
        2.36147409710693e+16,
        2.15107312245262e+16,
        1.94067214779831e+16,
        1.74965021028321e+16,
        1.57800730990733e+16,
        1.42297501279362e+16,
        1.28233857184048e+16,
        1.14225581766274e+16,
        1.01753787150252e+16,
        9.06523673033604e+15,
        8.07690583623618e+15,
        7.19931229721755e+15,
        6.41861394389498e+15,
        5.72512125769886e+15,
        5.11052893699811e+15,
        4.56237902934609e+15,
        4.07513466698874e+15,
        3.65156428380309e+15,
        3.27228884264993e+15,
        2.93315569271371e+15,
        2.62724374930185e+15,
        2.35316879547584e+15,
        2.11231504817419e+15,
        1.89499298882731e+15,
        1.70120261743518e+15,
        1.52540706624375e+15,
        1.36774475694687e+15,
        1.22586252074906e+15,
        1.09809929732411e+15,
        983209291427346,
        880085129507963,
        787342594627445,
        705950638642751,
        633002405983000,
        567667366485083,
        509114989985890,
        456514746322312,
        416095611717669,
        379552284540867,
        346469499710354,
        316431992144574,
        290685557088192,
        263554905093294,
        239054265281575,
        217045215959183,
        196974070350713,
        181055575557788,
        162645490275536,
        146173308707205,
        131223765771241,
        117783019298258,
        106930758500299,
        94569701239358.3,
        83565176578162.5,
        73778762822860.1,
        65085880448984.6,
        57375792101455.0,
        53357750641982.8,
        47506802095694.5,
        40518555213236.1,
        34005744874298.1,
        28537635490285.8,
        23921514780111.2,
        20057143906121.6,
        16652558891866.9,
        13780431669442.9,
        11381002174646.1,
        9392420989364.12,
        7744350322238.13,
        6405879116190.21,
        5306522647445.42,
        4393848921766.12,
        3638160989664.45,
        3012276202651.78,
        2514130029086.86,
        2105885311029.65,
        1769774709273.47,
        1490492901012.45,
        1258541804593.77,
        1074707194235.80,
        923103560395.665,
        795479635980.993,
        687440952527.610,
        595751466257.091,
        518696404137.100,
        453015023155.279,
        396750301157.957,
        348493717566.728,
        306642996606.567,
        270138298334.989,
        237931672089.530,
        209843535381.263,
        185130516413.514,
        163317725484.436,
        143727526693.036,
        126159204254.815,
        110437645761.540,
        96523181083.7434,
        84160079174.0025,
        73885281306.5504,
        64950870082.8530,
        56952183329.0766,
        49833363772.6223,
        43517684010.9218,
        38484982748.0227,
        34172434614.6541,
        30310074475.8176,
        26850639499.5609,
        23760786519.2761,
        21274741522.2688,
        19151957956.8994,
        17253415214.6990,
        15577768016.8555,
        14091901291.2115,
        12589130723.1503,
        11199743515.6834,
        9978685753.37057,
        8906044255.70833,
        7959651472.82661,
        7182853693.86601,
        6512244977.22575,
        5907916767.00857,
        5368018795.63000,
        4882752547.19258,
        4459593085.66827,
        4082503847.35340,
        3738037679.61999,
        3426845518.70406,
        3144557274.42265,
        2900346197.76786,
        2677654897.83757,
        2473503662.83907,
        2284509854.29688,
        2109621228.23135,
        1953506362.33488,
        1807998610.37035,
        1674118666.55607,
        1549639957.95794,
        1433396298.22073,
        1324515338.44783,
        1222478301.16831,
        1127397225.33112,
        1038944210.25461,
        956627165.154928,
        886787703.752348,
        824565017.512267,
        765614561.713756,
        709453517.568014,
        658806054.945853,
        611515679.324775,
        567585306.652756,
        526653668.210882,
        488686646.713711,
        453377725.016627,
        420288500.112590,
        389226153.951776,
        360336337.827689,
        333772834.048257,
        308485504.330140,
        285098540.542703,
        263227025.528245,
        242998112.978273,
        224156406.636314,
        206557266.019340,
        190267173.802713,
        175132831.106841,
        161138314.389234,
        148080335.018137,
        136086767.166758,
        125028630.142388,
        114819109.109465,
        105686063.151760,
        96975862.4401150,
        89036253.2009994,
        81683364.5701806,
        75073228.5993421,
        68893217.4892695,
        63264754.3023138,
        58091102.8089464,
        53382724.0837393,
        49203079.7354581,
        45254718.3513123,
        41666865.9187125,
        38376297.2370269,
        35480296.7412380,
        32785193.5935839,
        30361574.6659599,
        28066436.0962336,
        26026730.5483471,
        24134750.6242944,
        22456037.5677377,
        20886822.1372002,
        19054356.4019428,
        17454195.3363874,
        16017364.1243801,
        14702157.2413188,
        13547236.1002554,
        12522942.1736450,
        11591205.8958363,
        10751324.6335445,
        10009793.4807620,
        9327047.03657124,
        8723231.74949263,
        8170045.20282591,
        7683652.03781745,
        7238786.86792487,
        6829804.35549238,
        6459195.42466334,
        6131419.32556689,
        5830720.57303582,
        5558224.83961938,
        5306043.24983875,
        5081259.64798584,
        4866420.13848708,
        4679258.84003477,
        4500622.53257404,
        4339945.37830490,
        4192097.44879849,
        4041231.59114989,
        3910364.95895935,
        3791003.20156537,
        3673415.24102748,
        3559854.57589723,
        3452788.35469079,
        3354627.88024630,
        3254276.84722529,
        3161814.45363669
    };

	if (hh<0 || hh>250e3)
	{
		printf("h is outside of 0-250 km interval.\n");
		exit(2);
	}

	/**********************************************************************************/
	/* We have 30 samples partitioned in 30 intervals. First, we derive the upper/lower */
	/* bounds (_UpperBound/_LowerBound) of the interval								  */
	/**********************************************************************************/

	_LowerBound=0;
	_UpperBound=251;
	while(_UpperBound!=_LowerBound+1)
	{
		_Median=(_UpperBound+_LowerBound)/2;
		_dh=hh-_Altitude[_Median];
		if(_dh<0)  _UpperBound=_Median;
		if(_dh>=0) _LowerBound=_Median;
	}

	/**********************************************************************************/
	/* Now, we do an interpolation to estimate the neutral density at any height	  */
	/* between 0 and 150 km															  */
	/**********************************************************************************/

	_result = (_NeutralDensity[_LowerBound]/_NeutralDensity[0])*
		pow(_NeutralDensity[_UpperBound]/_NeutralDensity[_LowerBound],
			(hh-_Altitude[_LowerBound])/(_Altitude[_UpperBound]-_Altitude[_LowerBound]));
	//	double result=pow(10.,log10(_NeutralDensity[_LowerBound]/_NeutralDensity[0]) +
	//			  (log10(_NeutralDensity[_UpperBound])-log10(_NeutralDensity[_LowerBound]))
	//			  *(hh-_Altitude[_LowerBound])/(_Altitude[_UpperBound]-_Altitude[_LowerBound]));
	//	double c = 100*abs(_result-result)/_result;
	return _result;

	/**********************************************************************************/
	/* We note that result == _result analytically. However it does not seem to be the*/
	/* case here. The tests we tried with Matlab, show the same difference. We guess  */
	/* either an error in our reasoning or an approximation due to the use of log10 in*/
	/* the first case. We choose the first solution.								  */
	/**********************************************************************************/
}
